Class FutureTask
private static final int NEW          = 0; //任务新建和执行中
private static final int COMPLETING   = 1; //任务将要执行完毕
private static final int NORMAL       = 2; //任务正常执行结束
private static final int EXCEPTIONAL  = 3; //任务异常
private static final int CANCELLED    = 4; //任务取消
private static final int INTERRUPTING = 5; //任务线程即将被中断
private static final int INTERRUPTED  = 6; //任务线程已中断

Class ThreadPool
clt
            32 31 30 29 28 ...
Run         1  1  1  0  0  ...
ShutDown    0  0  0  0  0  ...
Stop        0  0  1  0  0  ...
Tidying     0  1  0  0  0  ...
Terminated  0  1  1  0  0  ...

capacity    0  0  0  1  1  ...

Class BlockingQueue
三. BlockingQueue的核心方法：
1.放入数据
(1)offer(anObject):表示如果可能的话,将anObject加到BlockingQueue里,即如果BlockingQueue可以容纳,则返回true,否则返回false.(本方法不阻塞当前执行方法的线程)；　　　　　　
(2)offer(E o, long timeout, TimeUnit unit)：可以设定等待的时间，如果在指定的时间内，还不能往队列中加入BlockingQueue，则返回失败.
(3)put(anObject):把anObject加到BlockingQueue里,如果BlockQueue没有空间,则调用此方法的线程被阻断直到BlockingQueue里面有空间再继续.
2. 获取数据
(1)poll(time):取走BlockingQueue里排在首位的对象,若不能立即取出,则可以等time参数规定的时间,取不到时返回null;
(2)poll(long timeout, TimeUnit unit)：从BlockingQueue取出一个队首的对象，如果在指定时间内，队列一旦有数据可取，则立即返回队列中的数据.否则知道时间超时还没有数据可取，返回失败.
(3)take():取走BlockingQueue里排在首位的对象,若BlockingQueue为空,阻断进入等待状态直到BlockingQueue有新的数据被加入;
(4)drainTo():一次性从BlockingQueue获取所有可用的数据对象(还可以指定获取数据的个数)，通过该方法，可以提升获取数据效率；不需要多次分批加锁或释放锁.

方法\处理方式     抛出异常    返回特殊值 	一直阻塞 	超时退出
插入方法 	    add(e) 	    offer(e) 	put(e) 	    offer(e,time,unit)
移除方法 	    remove() 	poll() 	    take() 	    poll(time,unit)
检查方法 	    element() 	peek() 	    不可用 	    不可用
