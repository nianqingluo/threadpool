ThreadPoolExecutor execute方法
public void execute(Runnable command) {
        if (command == null)
            throw new NullPointerException();
        /*
         * Proceed in 3 steps:
         *
         * 1. If fewer than corePoolSize threads are running, try to
         * start a new thread with the given command as its first
         * task.  The call to addWorker atomically checks runState and
         * workerCount, and so prevents false alarms that would add
         * threads when it shouldn't, by returning false.
         *
         * 2. If a task can be successfully queued, then we still need
         * to double-check whether we should have added a thread
         * (because existing ones died since last checking) or that
         * the pool shut down since entry into this method. So we
         * recheck state and if necessary roll back the enqueuing if
         * stopped, or start a new thread if there are none.
         *
         * 3. If we cannot queue task, then we try to add a new
         * thread.  If it fails, we know we are shut down or saturated
         * and so reject the task.
         */
        int c = ctl.get();
        if (workerCountOf(c) < corePoolSize) {          //当前线程数 < 核心线程数
            if (addWorker(command, true))
                return;
            c = ctl.get();
        }
        if (isRunning(c) && workQueue.offer(command)) { //当前线程数 >= 核心线程数,并且当前线程池在RUNNING状态,往队列里添加command
            int recheck = ctl.get();
            if (! isRunning(recheck) && remove(command)) //当前线程不在RUNNING状态,从队列里面remove掉当前的command
                reject(command);                        //执行reject操作
            else if (workerCountOf(recheck) == 0)       //当前线程数量为0
                addWorker(null, false);                 //开启一个新的线程
        }
        else if (!addWorker(command, false))            //以非核心线程数start 一个command
            reject(command);                            //如果失败,执行reject操作
    }


addWorker
private boolean addWorker(Runnable firstTask, boolean core) {
        //检查一下ThreadPoolExecutor的状态
        retry:
        for (;;) {
            int c = ctl.get();
            int rs = runStateOf(c);

            // Check if queue empty only if necessary.
            if (rs >= SHUTDOWN &&           //1.如果rs>SHUTDOWN,返回false
                ! (rs == SHUTDOWN &&        //2.如果rs=SHUTDOWN,只要firstTask != null或者workQueue.isEmpty(),则返回false
                   firstTask == null &&
                   ! workQueue.isEmpty()))
                return false;

            for (;;) {
                int wc = workerCountOf(c);
                if (wc >= CAPACITY ||        //如果线程池里面的线程数量大于 core,则返回false
                    wc >= (core ? corePoolSize : maximumPoolSize))
                    return false;
                if (compareAndIncrementWorkerCount(c))  //CAS操作,如果成功了,跳出外部循环
                    break retry;
                c = ctl.get();  // Re-read ctl
                if (runStateOf(c) != rs)                //重新读取ctl,如果状态不为RUNNING,重新执行外部循环
                    continue retry;
                // else CAS failed due to workerCount change; retry inner loop
            }
        }

        boolean workerStarted = false;//线程是否启动了
        boolean workerAdded = false;  //workers是否添加了
        Worker w = null;              //ThreadPoolExecutor里面的一个内部类,封装了Runnable 和Thread;
        try {
            w = new Worker(firstTask);
            final Thread t = w.thread;
            if (t != null) {
                final ReentrantLock mainLock = this.mainLock;
                mainLock.lock();
                //再一次判断线程池是否可以运行
                try {
                    // Recheck while holding lock.
                    // Back out on ThreadFactory failure or if
                    // shut down before lock acquired.
                    int rs = runStateOf(ctl.get());     //重新检查ThreadPoolExecutor的运行状态

                    if (rs < SHUTDOWN ||
                        (rs == SHUTDOWN && firstTask == null)) {
                        if (t.isAlive()) // precheck that t is startable     //线程已经启动了抛异常
                            throw new IllegalThreadStateException();
                                                         // Set containing all worker threads in pool. Accessed only when
                                                         // holding mainLock.
                        workers.add(w);                  private final HashSet<Worker> workers = new HashSet<>();
                        int s = workers.size();
                        if (s > largestPoolSize)        //记录最大的线程数量
                            largestPoolSize = s;
                        workerAdded = true;
                    }
                } finally {
                    mainLock.unlock();
                }
                if (workerAdded) {                      //增加成功
                    t.start();                          //线程运行
                    workerStarted = true;
                }
            }
        } finally {
            if (! workerStarted)
                addWorkerFailed(w);
        }
        return workerStarted;
    }

    执行run
    final void runWorker(Worker w) {                //ThreadPool线程中的子线程运行
            Thread wt = Thread.currentThread();
            Runnable task = w.firstTask;            //传进来的firstTask
            w.firstTask = null;                     //给worker 里面的firstTask置空
            w.unlock(); // allow interrupts
            boolean completedAbruptly = true;       //是否有异常的标志,true -> 有异常,false ->无异常
            try {
                while (task != null || (task = getTask()) != null) {           //第一次进来task!=null,当执行完毕后,task为空,
                                                                                    需要从BlockQueue里面获取task,如果获取到task=null,跳出while循环,结束线程
                    w.lock();
                    // If pool is stopping, ensure thread is interrupted;
                    // if not, ensure thread is not interrupted.  This
                    // requires a recheck in second case to deal with
                    // shutdownNow race while clearing interrupt
                    if ((runStateAtLeast(ctl.get(), STOP) ||            //如果线程池是STOP 或者 线程已经中断并且线程池是STOP 给线程设置中断
                         (Thread.interrupted() &&
                          runStateAtLeast(ctl.get(), STOP))) &&
                        !wt.isInterrupted())
                        wt.interrupt();
                    try {
                        beforeExecute(wt, task);                        //Thread wt = Thread.currentThread(); task = firstTask
                                                                        //执行任务前的一些操作,默认为空方法
                        Throwable thrown = null;
                        try {
                            task.run();
                        } catch (RuntimeException x) {
                            thrown = x; throw x;
                        } catch (Error x) {
                            thrown = x; throw x;
                        } catch (Throwable x) {
                            thrown = x; throw new Error(x);
                        } finally {
                            afterExecute(task, thrown);             //执行任务后的一些操作,默认为空方法
                        }
                    } finally {
                        task = null;
                        w.completedTasks++;                         //worker完成的task数量+1
                        w.unlock();
                    }
                }
                completedAbruptly = false;                          //没有异常
            } finally {
                processWorkerExit(w, completedAbruptly);            //退出线程
            }
        }

        退出线程
        private void processWorkerExit(Worker w, boolean completedAbruptly) {
            if (completedAbruptly) // If abrupt, then workerCount wasn't adjusted
                decrementWorkerCount();

            final ReentrantLock mainLock = this.mainLock;
            mainLock.lock();
            try {
                completedTaskCount += w.completedTasks;         //线程池的总完成task数量+1
                workers.remove(w);
            } finally {
                mainLock.unlock();
            }

            tryTerminate();                                     //重点分析

            int c = ctl.get();
            if (runStateLessThan(c, STOP)) {
                if (!completedAbruptly) {
                    int min = allowCoreThreadTimeOut ? 0 : corePoolSize;
                    if (min == 0 && ! workQueue.isEmpty())
                        min = 1;
                    if (workerCountOf(c) >= min)
                        return; // replacement not needed
                }
                addWorker(null, false);
            }
        }



        final void tryTerminate() {  //ThreadPool 子线程
            for (;;) {
                int c = ctl.get();
                if (isRunning(c) ||                                         //状态为RUNNING
                    runStateAtLeast(c, TIDYING) ||                          //状态为Terminated 或者 TIDYING
                    (runStateOf(c) == SHUTDOWN && ! workQueue.isEmpty()))  //状态为shutDown,并且workQueue不为null
                    return;                                                //do nothing
                if (workerCountOf(c) != 0) { // Eligible to terminate      //
                    interruptIdleWorkers(ONLY_ONE);                         //terminal one thread
                    return;
                }

                final ReentrantLock mainLock = this.mainLock;
                mainLock.lock();
                try {
                    if (ctl.compareAndSet(c, ctlOf(TIDYING, 0))) {
                        try {
                            terminated();
                        } finally {
                            ctl.set(ctlOf(TERMINATED, 0));
                            termination.signalAll();
                        }
                        return;
                    }
                } finally {
                    mainLock.unlock();
                }
                // else retry on failed CAS
            }
        }


        private void interruptIdleWorkers(boolean onlyOne) {
            final ReentrantLock mainLock = this.mainLock;
            mainLock.lock();
            try {
                for (Worker w : workers) {
                    Thread t = w.thread;
                    if (!t.isInterrupted() && w.tryLock()) {
                        try {
                            t.interrupt();
                        } catch (SecurityException ignore) {
                        } finally {
                            w.unlock();
                        }
                    }
                    if (onlyOne)
                        break;
                }
            } finally {
                mainLock.unlock();
            }
        }